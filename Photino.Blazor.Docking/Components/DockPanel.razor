@using Microsoft.JSInterop
@using Photino.Blazor.Docking.Components.Internal
@using Photino.Blazor.Docking.LayoutScheme
@using Photino.Blazor.Docking.Services
@using System.Drawing
@using System.Reflection

@inherits DockPanelBase

@inject DockingService DockingService
@inject PhotinoBlazorApp PhotinoBlazorApp
@inject IJSRuntime JSRuntime

@if (ParentComponent is null && DockScheme.ParentContainer != null && !DockScheme.IsHidden)
{
    <div class="pb-dock-panel">
        @if (ShowHeader)
        {
            <CascadingValue Name="DockScheme" Value="DockScheme">
                <DockPanelHeader />
            </CascadingValue>
        }

        <div @ref="dockPanelArea" class="pb-dock-panel-area">
            <div class="pb-dock-panel-destroy-mask"
                 style="@(ShowGhostMask ? "" : "opacity: 0")">
            </div>

            <div class="pb-dock-panel-content" style="@(DockScheme.IsDetachedGhost ? "display: none" : "")">
                @PanelContent
            </div>

            @if (DockingService.DockToAttach.Panel == DockScheme)
            {
                <DockCompass PanelIsDetachedGhost="@(DockScheme.IsDetachedGhost)"
                             DisabledZones="@UnavailableZones" />
            }
        </div>
    </div>
}

@code
{
    private const string GetDocumentSizeScript =
        @"[document.documentElement.clientWidth * window.devicePixelRatio,
           document.documentElement.clientHeight * window.devicePixelRatio]";

    private ElementReference dockPanelArea;

    internal new DockPanelScheme DockScheme
    {
        get
        {
            if (base.DockScheme is not DockPanelScheme scheme)
            {
                scheme = new();
                base.DockScheme = scheme;
            }

            return scheme;
        }
        set => base.DockScheme = value;
    }

    [Parameter]
    public string Id
    {
        get => DockScheme.Id;
        set => DockScheme.Id = value;
    }

    [Parameter]
    public Type ComponentType
    {
        get => DockingService.GetPanelConfig(DockScheme.Id).ComponentType;
        set => DockScheme.Id = DockingService.GetPanelConfig(value).Id;
    }

    private bool ShowHeader => !DockScheme.ParentContainer.OverrideHeaderView;
    private bool ShowGhostMask
    {
        get
        {
            var dockToAttach = DockingService.DockToAttach;
            return DockScheme.IsDetachedGhost && !(dockToAttach.Panel == DockScheme && dockToAttach.Zone != DockZone.Outside);
        }
    }
    private DockZone UnavailableZones
    {
        get
        {
            return DockingService.GetPanelConfig(DockScheme.Id).DisabledZones | DockingService.GlobalDisabledDockZones;
        }
    }

    private RenderFragment PanelContent => (builder) =>
    {
        builder.OpenComponent(0, ComponentType);
        builder.AddComponentReferenceCapture(1, component =>
        {
            DockScheme.TryRestoreComponentState(component);
            DockScheme.GetComponentInstanceFunc = () => component;
        });
        builder.CloseComponent();
    };

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (ParentComponent != null)
            return;

        DockingService.DockPanelMoveBegin += OnDockPanelMoveBegin;
        DockingService.DockPanelToAttachChanged += () => InvokeAsync(StateHasChanged);
        DockingService.DockZoneToAttachChanged += () =>
        {
            if (DockScheme.IsDetachedGhost)
                InvokeAsync(StateHasChanged);
        };
    }

    private async void OnDockPanelMoveBegin()
    {
        if (DockScheme.IsHidden)
            return;

        var bounds = await JSRuntime.GetElementBounds(dockPanelArea, true);
        var area = bounds.Item1;
        var areaScaleFactor = bounds.Item2;

        var window = PhotinoBlazorApp.MainWindow;
        var documentOffset = Point.Empty;
        if (!window.Chromeless)
        {
            var documentSize = await JSRuntime.InvokeAsync<double[]>("eval", GetDocumentSizeScript);
            var windowBorderWidth = (window.Width - (int)documentSize[0]) / 2;
            documentOffset = new Point(windowBorderWidth, window.Height - (int)documentSize[1] - windowBorderWidth);
        }

        area.Offset(documentOffset);
        area.Offset(window.Location);
        DockingService.StoreDockPanelAreaInfo(DockScheme, area, areaScaleFactor);
    }

    public override void Dispose()
    {
        DockingService.DockPanelMoveBegin -= OnDockPanelMoveBegin;
        base.Dispose();
    }
}
