@using Photino.Blazor.CustomWindow.Components
@using Photino.Blazor.Docking.LayoutScheme
@using Photino.Blazor.Docking.Services
@using Photino.NET
@using Microsoft.AspNetCore.Components.Web
@using Radzen
@using System.Drawing
@using System.ComponentModel

@inherits DockPanelContainer

@inject DockingService DockingService
@inject PhotinoBlazorApp PhotinoBlazorApp

<CustomWindow @ref="CustomWindow"
              Title="@HeaderTitle" ShowIcon="false" MinSize="@(DockScheme.WindowMinSize)"
              Style="--pb-custom-window-main-color: var(--pb-docking-main-color);
                     --pb-custom-window-main-unfocused-color: var(--pb-docking-float-unfocused-color);
                     --pb-custom-window-background-color: var(--pb-docking-background-color);
                     --pb-custom-window-title-color: var(--pb-docking-title-color);
                     --pb-custom-window-controls-color: var(--pb-docking-controls-color);
                     --pb-custom-window-controls-background: var(--pb-docking-controls-background);
                     --pb-custom-window-controls-background-hover: var(--pb-docking-controls-background-hover);
                     --pb-custom-window-close-control-color: var(--pb-docking-float-close-control-background);"
              @bind-Location="@(DockScheme.WindowLocation)" @bind-Size="@(DockScheme.WindowSize)" @bind-Maximized="@(DockScheme.WindowMaximized)">

    <HeaderCentralLayout>
        <div class="pb-dock-panel-float-mosaic"></div>
    </HeaderCentralLayout>

    <WindowContent>
        @if (!DockScheme.MarkedToDestroy)
        {
            <DockPanelFloatWrapper>
                <CascadingValue Name="ParentContainerScheme" Value="DockScheme">
                    <CascadingValue Name="DockScheme" Value="DockScheme.HostedPanel">
                        <div class="pb-dock-panel-float" style="@(DockScheme.HostedPanel is DockPanelScheme dockPanel ? "border-top: none" : "")">
                            @switch (DockScheme.HostedPanel)
                            {
                                case DockPanelScheme:
                                    <DockPanel />
                                    break;
                                case DockPanelSplitScheme:
                                    <DockPanelSplit />
                                    break;
                                case DockPanelTabsScheme:
                                    <DockPanelTabs />
                                    break;
                            }

                            <div class="pb-dock-panel-destroy-mask"
                                 style="@(DockingService.MovingFloatPanel == DockScheme &&
                                          DockingService.DockToAttach.Zone != DockZone.Outside ?
                                          "" : "opacity: 0")">
                            </div>
                        </div>
                    </CascadingValue>
                </CascadingValue>
            </DockPanelFloatWrapper>
        }
    </WindowContent>
</CustomWindow>

@code {
    private CustomWindow _customWindow;
    private CustomWindow CustomWindow
    {
        get => _customWindow;
        set
        {
            _customWindow = value;
            _customWindow.WindowMoveBegin += () => { DockingService.FloatPanelMoveBegin(DockScheme); };
            _customWindow.WindowMoveEnd += () => { DockingService.FloatPanelMoveEnd(); };
            _customWindow.WindowMoving += (e) => { DockingService.FloatPanelMoving(e); };
            _customWindow.WindowFocusIn += () => { DockingService.PutHostPanelOnTopOfVisibleList(DockScheme); };
            _customWindow.WindowClosing += () => {
                DockScheme.MarkedToDestroy = true;
                DockingService.FloatPanelClosing(DockScheme);
                Dispose();
                return false;
            };
        }
    }

    internal new DockPanelFloatScheme DockScheme
    {
        get
        {
            // restore DockScheme when F5 key was pressed
            if (base.DockScheme is null)
                base.DockScheme = DockingService.FloatPanelApps.First(f => f.Value == PhotinoBlazorApp).Key;

            return (DockPanelFloatScheme)(base.DockScheme);
        }
        set => base.DockScheme = value;
    }

    private string HeaderTitle
    {
        get
        {
            var visiblePanels = DockScheme.HostedPanel.GetAllDockPanelsInside().Where(p => !p.IsHidden);
            if (visiblePanels.Count() == 1)
                return DockingService.GetPanelConfig(visiblePanels.Single().Id).Title;
            else
                return DockingService.MultiplePanelsTitle;
        }
    }

    protected override void OnInitialized()
    {
        if (DockingService.FloatPanelsCreateQueue.TryDequeue(out var floatPanel))
        {
            DockScheme = floatPanel;
            DockingService.PutHostPanelOnTopOfVisibleList(DockScheme);

            base.OnInitialized();
            StateHasChanged();
        }
    }

    protected override void OnDockSchemePropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        base.OnDockSchemePropertyChanged(sender, e);

        if (DockScheme.MarkedToDestroy)
            CustomWindow.Close();
    }
}
